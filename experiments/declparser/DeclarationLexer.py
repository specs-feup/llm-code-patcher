# Generated from ./antlr/Declaration.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,4,5,46,8,5,11,5,12,5,47,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        5,12,86,8,12,10,12,12,12,89,9,12,1,13,1,13,5,13,93,8,13,10,13,12,
        13,96,9,13,4,13,98,8,13,11,13,12,13,99,1,14,1,14,5,14,104,8,14,10,
        14,12,14,107,9,14,1,14,1,14,5,14,111,8,14,10,14,12,14,114,9,14,4,
        14,116,8,14,11,14,12,14,117,1,15,1,15,1,15,5,15,123,8,15,10,15,12,
        15,126,9,15,3,15,128,8,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,5,3,0,9,10,
        13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,137,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,38,
        1,0,0,0,7,40,1,0,0,0,9,42,1,0,0,0,11,45,1,0,0,0,13,51,1,0,0,0,15,
        55,1,0,0,0,17,60,1,0,0,0,19,67,1,0,0,0,21,72,1,0,0,0,23,78,1,0,0,
        0,25,83,1,0,0,0,27,97,1,0,0,0,29,115,1,0,0,0,31,127,1,0,0,0,33,34,
        5,58,0,0,34,2,1,0,0,0,35,36,5,45,0,0,36,37,5,62,0,0,37,4,1,0,0,0,
        38,39,5,44,0,0,39,6,1,0,0,0,40,41,5,45,0,0,41,8,1,0,0,0,42,43,5,
        46,0,0,43,10,1,0,0,0,44,46,7,0,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,
        45,1,0,0,0,47,48,1,0,0,0,48,49,1,0,0,0,49,50,6,5,0,0,50,12,1,0,0,
        0,51,52,5,118,0,0,52,53,5,97,0,0,53,54,5,114,0,0,54,14,1,0,0,0,55,
        56,5,102,0,0,56,57,5,117,0,0,57,58,5,110,0,0,58,59,5,99,0,0,59,16,
        1,0,0,0,60,61,5,115,0,0,61,62,5,116,0,0,62,63,5,114,0,0,63,64,5,
        117,0,0,64,65,5,99,0,0,65,66,5,116,0,0,66,18,1,0,0,0,67,68,5,101,
        0,0,68,69,5,110,0,0,69,70,5,117,0,0,70,71,5,109,0,0,71,20,1,0,0,
        0,72,73,5,97,0,0,73,74,5,108,0,0,74,75,5,105,0,0,75,76,5,97,0,0,
        76,77,5,115,0,0,77,22,1,0,0,0,78,79,5,109,0,0,79,80,5,101,0,0,80,
        81,5,109,0,0,81,82,5,98,0,0,82,24,1,0,0,0,83,87,7,1,0,0,84,86,7,
        2,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,
        26,1,0,0,0,89,87,1,0,0,0,90,94,5,42,0,0,91,93,3,11,5,0,92,91,1,0,
        0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,98,1,0,0,0,96,94,
        1,0,0,0,97,90,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,
        100,28,1,0,0,0,101,105,5,91,0,0,102,104,3,11,5,0,103,102,1,0,0,0,
        104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,
        107,105,1,0,0,0,108,112,5,93,0,0,109,111,3,11,5,0,110,109,1,0,0,
        0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,116,1,0,0,
        0,114,112,1,0,0,0,115,101,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,
        0,117,118,1,0,0,0,118,30,1,0,0,0,119,128,5,48,0,0,120,124,7,3,0,
        0,121,123,7,4,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,
        0,124,125,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,127,119,1,0,0,
        0,127,120,1,0,0,0,128,32,1,0,0,0,10,0,47,87,94,99,105,112,117,124,
        127,1,6,0,0
    ]

class DeclarationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    WS = 6
    VAR = 7
    FUNC = 8
    STRUCT = 9
    ENUM = 10
    ALIAS = 11
    MEMBER = 12
    ID = 13
    PTRS = 14
    ARRS = 15
    INT = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'->'", "','", "'-'", "'.'", "'var'", "'func'", "'struct'", 
            "'enum'", "'alias'", "'memb'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "VAR", "FUNC", "STRUCT", "ENUM", "ALIAS", "MEMBER", "ID", 
            "PTRS", "ARRS", "INT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "WS", "VAR", "FUNC", 
                  "STRUCT", "ENUM", "ALIAS", "MEMBER", "ID", "PTRS", "ARRS", 
                  "INT" ]

    grammarFileName = "Declaration.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


